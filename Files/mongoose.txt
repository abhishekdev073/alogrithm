1.mongoose :Object Data Modeling (ODM) library for MongoDB and Node. js
2. 
const mongoose = require('mongoose');
mongoose.connect('mongodb://userName:password@localhost:27017/test', {useNewUrlParser: true, useUnifiedTopology: true});
const Cat = mongoose.model('Cat', { name: String });
const kitty = new Cat({ name: 'Zildjian' });
kitty.save().then(() => console.log('meow'));

3.schema
            Everything in Mongoose starts with a Schema. 
            Each schema maps to a MongoDB collection
var mongoose = require('mongoose');
const { Schema } = mongoose;
const userSchema = new Schema({
    name: String,
    lastName: { type: String },
    comments: [{ body: String, date: Date }],
    date: { type: Date, default: Date.now },
    address: {
        city: String,
        pinCode: Number
    }
});
const User = mongoose.model("userSchema", userSchema);
module.exports = User;

var User = require('./user')
const user = new User({ name: 'abhi' });
user.save().then(() => console.log('saved'));

4. Instance
5. Connections :-mongoose.connect('mongodb://username:password@host:port/database?options...', {useNewUrlParser: true});
6. Operation Buffering:- We can use mongoose model before connecting to mongoDB. its hangs.
7. useNewUrlParser : true. To use new collection string parser
8. poolSize :-The maximum number of sockets the MongoDB driver will keep open for this connection
         default, poolSize is 5
         one operation per socket at a time
         use this if few slow queries that are blocking faster queries    
 9.  keepAlive :-long running applications, enable keepAlive with a number of milliseconds  .
             There might be chance we see message like connection closed to fix this use keepAlive
 10.Multiple connections :-mongoose.connect('mongodb://user:pw@host1.com:27017,host2.com:27017,host3.com:27017/testdb');                     
11. Model =>const user = new User({ Name: 'small' });
         Save =>   user.save(function (err) {})
         Create :-  User.create({ naem: 'abhi' }, function (err, small) { })
         insertMany :-   User.insertMany([{ name: 'abhi' }], function(err) {
         find  :-  User.find({ name: 'small' }).where('createdDate').gt(oneYearAgo).exec(callback);
         deleteOne :- User.deleteOne({ name: 'abhi' }, function (err) {
         deleteMany :- User.deleteMany({ name: 'abhi' }, function (err) {
         updateOne :- User.updateOne({ size: 'large' }, { name: 'T-90' }, function(err, res) {

12. Documents :-  instance of a model.  
                 const doc = new MyModel();   
                 update using save  
                 user.name ='abhi';
                await user.save()  

                save() function right way to update a document.get full validation and middleware  
                update(), updateMany(), findOneAndUpdate() => not execute save() middleware
13. Overwrite document :-
               // Sets `name` and unsets all other properties
                doc.overwrite({ name: 'abhi' });
                await doc.save();
                User.replaceOne({ _id }, { name: 'Jean-Luc Picard' });

14. Subdocuments:- documents embedded in other documents 
                  nest schemas in other schemas   
                  saved whenever their top-level parent document is saved
                  const childSchema = new Schema({ name: 'string' });

                const childSchema = new Schema({ name: 'string' });
                const parentSchema = new Schema({children: [childSchema],lastName:String,  child: childSchema});     
                subdocuments have save and validate middleware just like top-level documents

 16 . Subdocuments versus Nested Paths  :- nested paths are subtly different from subdocuments.   
               const subdocumentSchema = new mongoose.Schema({child: new mongoose.Schema({ name: String, age: Number })
               subDoc === undefined
               we can not access nest.child.name => gives error
               subDoc.set({name:'abhi'}) => merge the object => {name:'abhi'}

               const nestedSchema = new mongoose.Schema({child: { name: String, age: Number }});
                nested !== undefined
                we can access nest.child.name 
                nested.set({name:'abhi'}) => merge the object => {name:'abhi',age:10}
           
});

17 Finding a Subdocument :-const doc = parent.children.id(_id);
18 Adding Subdocs to Arrays :-parent.children.push({ name: 'Liesl' });
19 Removing Subdocs :- parent.children.id(_id).remove(); //Equivalent to `parent.children.pull(_id)`
                    parent.child.remove(); //Equivalent to `parent.child = null`
20 Parents of Subdocs :-doc.child.parent() 
                        doc.children[0].parent()
                        doc.level1.level2.ownerDocument() 
 
21 Queries :- 
                    Model.deleteMany()
                    Model.deleteOne()
                    Model.find()
                    Model.findById()
                    Model.findByIdAndDelete()
                    Model.findByIdAndRemove()
                    Model.findByIdAndUpdate()
                    Model.findOne()
                    Model.findOneAndDelete()
                    Model.findOneAndRemove()
                    Model.findOneAndReplace()
                    Model.findOneAndUpdate()
                    Model.replaceOne()
                    Model.updateMany()
                    Model.updateOne()
                    
                    Model.find(CB) or Model.find().then(function(x)=>{})
                    // select name age lastName column
                    Person.findOne({ 'name': 'abhi' }, 'name age lastName', function (err, obj) {})

                   // With a JSON doc
                    Person.
                    find({
                        occupation: /host/,
                        'name.last': 'Ghost',
                        age: { $gt: 17, $lt: 66 },
                        likes: { $in: ['vaporizing', 'talking'] }
                    }).
                    limit(10).
                    sort({ occupation: -1 }).
                    select({ name: 1, occupation: 1 }).
                    exec(callback);

                    // Using query builder
                        Person.
                        find({ occupation: /host/ }).
                        where('name.last').equals('Ghost').
                        where('age').gt(17).lt(66).
                        where('likes').in(['vaporizing', 'talking']).
                        limit(10).
                        sort('-occupation').
                        select('name occupation').
                        exec(callback);

22. Queries are Not Promises :-
                        const q = MyModel.updateMany({}, { isDeleted: true }, function() {
                                console.log('Update 1');
                        });

                        q.then(() => console.log('Update 2'));
                        q.then(() => console.log('Update 3'));

23. References to other documents :- No join in mongoDB. we use population for this   
24.Aggregation :- can do many of the same things that queries can
                 const docs = await Person.aggregate([{ $match: { 'name.last': 'Ghost' } }]);
                 try to avoid aggregate() use query
                 aggregate does not return document mean we can not doc.save it  .
                 aggregate does not cast its field we need to cast it   
25 Query Casting :- query get casted like age:'100', ang age:"hundred" gives error
26 The strictQuery Option 
                            :-Mongoose does not cast filter properties that aren't in your schema.
                             const query = User.findOne({ notInSchema: { $lt: 'not a number' } });
                           // No error because `notInSchema` is not defined in the schema
                              await query.exec();   

                              Schema({ name: String, age: Number }, {strictQuery: true}); 
                              Now property that are not in schema get removed from filter and we get the result                             
27. Implicit $in :-  Character.findOne({ name: ['Abhi', 'abhi1'] });
             it  work 
             // `{ name: { $in: ['abhi', 'abhi1'] } }`
                  query.getFilter();
28.  findOneAndUpdate()  :- try to use save() where ever possible.
                    By default, findOneAndUpdate() returns the document as it was before update was applied.                
                    let doc = await Character.findOneAndUpdate(filter, update, {
                         new: true,// return the updated obj
                          upsert: true // Make this update into an upsert,
                        rawResult: true // Return the raw result from the MongoDB driver
                        //res.lastErrorObject.updatedExisting; // false
                        
                        });
29. Atomic Updates :- save() work in 2 step 1. find and then save(). 
                       data might get changed in between them
                       to fix this use  findOneAndUpdate or use transaction  

30. Lean => Model.find().lean() // its does not return mongoose object we can not doc.save() it
         lean() bypasses all Mongoose features, including virtuals, getters/setters, and defaults 
         if you want to use that you need to use plugins                                     

31 Middleware :-also called pre and post hooks
              schema.pre('save', function(next) {
                        const err = new Error('something went wrong');
                          next(err) // error
                         // next() in case no error
                        });
                        // promise
                        schema.pre('save', function() {  
                        return new Promise((resolve, reject) => {
                            reject(new Error('something went wrong'));
                        });
                        });
                     post => schema.post   
            //all middleware and plugins before calling mongoose.model()
            //The save() function triggers validate() hooks, because mongoose has a built-in pre('save') hook that calls validate()
 
 32. Naming Conflicts :-
                    // Only document middleware
                    schema.pre('remove', { document: true, query: false }, function() {  });
                    // Only query middleware. This will get called when you do `Model.remove()`
                    // but not `doc.remove()`.
                    schema.pre('remove', { query: true, document: false }, function() {});

 33. Pre and post save() hooks are not executed on update(), findOneAndUpdate()     
34.Populate :-reference documents in other collections
         replace paths in the document with document(s) from other collection
                    const personSchema = Schema({
                    _id: Schema.Types.ObjectId,
                    name: String,
                    age: Number,
                    stories: [{ type: Schema.Types.ObjectId, ref: 'Story' }]
            });

            const storySchema = Schema({
            author: { type: Schema.Types.ObjectId, ref: 'Person' },
            title: String,
            fans: [{ type: Schema.Types.ObjectId, ref: 'Person' }]
            });

             Story.findOne({ title: 'Casino Royale' }).populate('author'). exec(function (err, story) {}
             story.populated('author'); // truthy
             story.depopulate('author');
             story.populated('author'); 
             populate('author', 'name'). // only return the Persons name

             Story.find(...).populate('fans').populate('author').exec();
             Story.
                    find().populate({
                        path: 'fans',
                        match: { age: { $gte: 21 } },
                        select: 'name -_id',
                        options: { limit: 2 }
                    }).
                    exec();

 35 Discriminators :- inheritance mechanism.                   
36. Plugins :- Want common functionality in all schema use plugins
               Like we want loadedAt property at our all schema then we can use plugin           

37. Transactions:- Perform multiple operation if one fail undo all of them

               ///////////////////Topic//////////////////////////
1.MongoDB 
       open-source NoSQL database written in C++ language
       It uses JSON-like documents
       easy scalability and is a cross-platform,
       MongoDB basically uses JavaScript objects
       MongoDB uses a dynamic database schema
       MongoDB is very easy to scale up or down
2.  Document  :-set of keys with associated values
3. Collection group of documents.
4. Databases :-MongoDB groups collections into databases.     
5. When to use MongoDB :
                 -applications need to evolve quickly and scale
                 scalable applications using agile methodologies
                 Support a rapid iterative development
6.Sharding (partitioning):-splitting data up across machines   
7.Aggregation Framework in MongoDB :- do analytics on documents in one or more collections.
                based on the concept of a pipeline
                take  input from collection and pass to the other  
8. Replica Set in MongoDB :- Copy of your data in multiple sever 
9.  utilities for backup and restore in MongoDB
mongoimport
mongoexport
mongodump
mongorestore                


                      