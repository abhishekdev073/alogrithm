1.Lib => react.development.js,react-dom.development.js
2.Babel => used for jsx, Convert ES6 code,jsx code
         npx babel --watch src --out-dir . --presets react-app/prod
3 JSX =>Preprocessor like sass babel run it,JSX Prevents Injection Attacks
4. npm init react-app my-app => create the app with dependency
5. its uses Next.js:-static and server‑rendered applications
  Gatsby :-pre-rendered HTML and CSS to guarantee the fastest load time.
6. npx create-react-app my-app  
7. ReactDOM.render(<h1>Hello, world!</h1>,document.getElementById('root'));  
8. Props :- Props are Read-Only,pass data to component
9. state :- Only assign in constructor, this.setState({name: 'abhi'});
   Wrong =>  this.setState({  counter: this.state.counter + this.props.increment,});
   setState is asynch we might not get the correct state
   // Correct this.setState((state, props) => ({counter: state.counter + props.increment}));
   // correct => this.setState(function(state, props) {  return {counter: state.counter + props.increment }});
   We get last stage and props
10 .setState :- it merged the object   
11 function => state less
12  class => state
13. Lifecycle :- use for to free up resources componentDidMount, componentWillUnmount
14. The Data Flows Down :- component can pass it state to child as props
15. Event :- <button onClick={() => this.handleClick()}>Click me</button> // bad every time callback function get create
        <button onClick={() => this.handleClick.bind(this)}>Click me</button>           
        <button onClick={() => this.handleClick}>Click me</button>  
        // pass parameter 
         <button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
         <button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>  

 16. Lists and Keys :- 
          const numbers = [1, 2, 3, 4, 5];
          const listItems = numbers.map((number) =>
            <li key={number.toString()} >{number}</li>
          ); 

  17.Form :  Controlled Components : we update the value by self onChange= this.inputChange.bind(this)                     
        alternative is we can use formik lib
  18. Lifting State Up :-child share state to parent
             We pass state from parent and one function child call this function and parent update the state
  19. Composition :-Combine component
           // comp1 
           <div>
           <Parent>I am parent content</Parent>
           </div>

            // comp2
           <div>
           <h1> I am going to render parent data as well<h1>
            {props.children}
           </div>

          <SplitPane left={<Contacts />} right={<Chat />} />

           <div>Left {props.left}</div>
           <div>{props.right}</div>

 20 React.lazy :- Load component at lazy
             const OtherComponent = React.lazy(() => import('./OtherComponent'));
              <Suspense fallback={<div>Loading...</div>}>
                 <OtherComponent />
               </Suspense>     

               show loading msg untill OtherComponent get loaded
 21  Route  :-
            import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
            const Home = lazy(() => import('./routes/Home'));
            const About = lazy(() => import('./routes/About'));

            const App = () => (
              <Router>
                <Suspense fallback={<div>Loading...</div>}>
                  <Switch>
                    <Route exact path="/" component={Home}/>
                    <Route path="/about" component={About}/>
                  </Switch>
                </Suspense>
              </Router>
            );  
22 Context provides :- To pass common data to all the nesting component use Context
        const ThemeContext = React.createContext('light');
      <ThemeContext.Provider value="I m data">
       <ThemeContext1.Provider value="I am data1">
         <Toolbar />
       </ThemeContext1.Provider>
       </ThemeContext.Provider>

         <ThemeContext.Consumer>
      {data => (
        <ThemeContext1.Consumer>
          {data1 => (
            <div>
              {data1}-{data}
            </div>
          )}
        </ThemeContext1.Consumer>
      )}
    </ThemeContext.Consumer>
     always pass value as state
23  ErrorBoundary :- handle the error in its child component
          componentDidCatch hanlde the error 
24 Forwarding Refs :- pass ref to access child component from parent
25 fragments :- like ng-template  :- used for grouping
26 Higher-Order Components :- takes component return new component, such as Redux’s connect 
27  Jquery :- can be used
28 Optimizing Performance :-Production Build,React Developer Tools for Chrome.
29 Portals :- render children into a DOM node that exists outside the DOM hierarchy of the parent component.        
30 Profiler :-measures how often a React application renders and what the “cost” of rendering is
31 Refs and the DOM :- access DOM nodes or React elements created in the render method.
                        this.myRef = React.createRef();
                        this.myRef.current.focus();
                        used for auto focus and trigger

 32 PropTypes :- its like defined moldel interface  can add validator
 33 Hooks :-you use state and other React features without writing a class
            import React, { useState } from 'react';
             const [count, setCount] = useState(0);
             <button onClick={() => setCount(count + 1)}>
             Hooks don’t work inside classes 
             useEffect :- same as componentDidMount                      